// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package logs

import "encoding/json"
import "fmt"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Condition) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["class"]; !ok || v == nil {
		return fmt.Errorf("field class in Condition: required")
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description in Condition: required")
	}
	if v, ok := raw["message"]; !ok || v == nil {
		return fmt.Errorf("field message in Condition: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Condition: required")
	}
	if v, ok := raw["specifier"]; !ok || v == nil {
		return fmt.Errorf("field specifier in Condition: required")
	}
	if v, ok := raw["system"]; !ok || v == nil {
		return fmt.Errorf("field system in Condition: required")
	}
	type Plain Condition
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Condition(plain)
	return nil
}

type Class struct {
	// Description corresponds to the JSON schema field "description".
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// Specifier corresponds to the JSON schema field "specifier".
	Specifier float64 `json:"specifier" yaml:"specifier" mapstructure:"specifier"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LdLogCodesJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["classes"]; !ok || v == nil {
		return fmt.Errorf("field classes in LdLogCodesJson: required")
	}
	if v, ok := raw["conditions"]; !ok || v == nil {
		return fmt.Errorf("field conditions in LdLogCodesJson: required")
	}
	if v, ok := raw["systems"]; !ok || v == nil {
		return fmt.Errorf("field systems in LdLogCodesJson: required")
	}
	type Plain LdLogCodesJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LdLogCodesJson(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *System) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description in System: required")
	}
	if v, ok := raw["specifier"]; !ok || v == nil {
		return fmt.Errorf("field specifier in System: required")
	}
	type Plain System
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = System(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Message) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["parameterized"]; !ok || v == nil {
		return fmt.Errorf("field parameterized in Message: required")
	}
	type Plain Message
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Message(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Class) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description in Class: required")
	}
	if v, ok := raw["specifier"]; !ok || v == nil {
		return fmt.Errorf("field specifier in Class: required")
	}
	type Plain Class
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Class(plain)
	return nil
}

type Condition struct {
	// Class corresponds to the JSON schema field "class".
	Class float64 `json:"class" yaml:"class" mapstructure:"class"`

	// Deprecated corresponds to the JSON schema field "deprecated".
	Deprecated *bool `json:"deprecated,omitempty" yaml:"deprecated,omitempty" mapstructure:"deprecated,omitempty"`

	// DeprecatedReason corresponds to the JSON schema field "deprecatedReason".
	DeprecatedReason *string `json:"deprecatedReason,omitempty" yaml:"deprecatedReason,omitempty" mapstructure:"deprecatedReason,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// Message corresponds to the JSON schema field "message".
	Message Message `json:"message" yaml:"message" mapstructure:"message"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Specifier corresponds to the JSON schema field "specifier".
	Specifier float64 `json:"specifier" yaml:"specifier" mapstructure:"specifier"`

	// Superseded corresponds to the JSON schema field "superseded".
	Superseded *string `json:"superseded,omitempty" yaml:"superseded,omitempty" mapstructure:"superseded,omitempty"`

	// SupersededReason corresponds to the JSON schema field "supersededReason".
	SupersededReason *string `json:"supersededReason,omitempty" yaml:"supersededReason,omitempty" mapstructure:"supersededReason,omitempty"`

	// System corresponds to the JSON schema field "system".
	System float64 `json:"system" yaml:"system" mapstructure:"system"`
}

// Defines LaunchDarkly SDK Log Codes
type LdLogCodesJson struct {
	// Classes corresponds to the JSON schema field "classes".
	Classes LdLogCodesJsonClasses `json:"classes" yaml:"classes" mapstructure:"classes"`

	// Conditions corresponds to the JSON schema field "conditions".
	Conditions LdLogCodesJsonConditions `json:"conditions" yaml:"conditions" mapstructure:"conditions"`

	// Systems corresponds to the JSON schema field "systems".
	Systems LdLogCodesJsonSystems `json:"systems" yaml:"systems" mapstructure:"systems"`
}

type LdLogCodesJsonClasses map[string]Class

type LdLogCodesJsonConditions map[string]Condition

type LdLogCodesJsonSystems map[string]System

type Message struct {
	// Parameterized corresponds to the JSON schema field "parameterized".
	Parameterized string `json:"parameterized" yaml:"parameterized" mapstructure:"parameterized"`

	// Parameters corresponds to the JSON schema field "parameters".
	Parameters MessageParameters `json:"parameters,omitempty" yaml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
}

type MessageParameters map[string]string

type System struct {
	// Description corresponds to the JSON schema field "description".
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// Specifier corresponds to the JSON schema field "specifier".
	Specifier float64 `json:"specifier" yaml:"specifier" mapstructure:"specifier"`
}
